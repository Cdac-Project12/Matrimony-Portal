package com.matrimony.Service;

import com.matrimony.Dao.UserDao;
import com.matrimony.Entity.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Optional;

@Service
public class UserService {

    @Autowired
    private UserDao userDao;

    @Value("${upload.dir}") // Configure the upload directory path (in application.properties)
    private String uploadDir;

    public User addUser(User user) {
        return userDao.save(user);
    }

    public ResponseEntity<?> login(User loginRequest) {
        Optional<User> userOpt = userDao.findByEmail(loginRequest.getEmail());

        if (userOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("User not found.");
        }

        User user = userOpt.get();
        if (!loginRequest.getPassword().equals(user.getPassword())) {
            return ResponseEntity.badRequest().body("Invalid credentials.");
        }

        return ResponseEntity.ok(user);
    }

    public ResponseEntity<?> updateUser(Long userId, String firstName, String lastName, String email, String phone,
                                        String address, String maritalStatus, String religion, String caste,
                                        String motherTongue, String education, String profession, double annualIncome,
                                        String bio, String hobbies, MultipartFile profilePicture) {
        Optional<User> existingUserOpt = userDao.findById(userId);

        if (existingUserOpt.isEmpty()) {
            return ResponseEntity.status(404).body("User not found");
        }

        User existingUser = existingUserOpt.get();
        
        // Update user details
        existingUser.setFirstName(firstName != null ? firstName : existingUser.getFirstName());
        existingUser.setLastName(lastName != null ? lastName : existingUser.getLastName());
        existingUser.setEmail(email != null ? email : existingUser.getEmail());
        existingUser.setPhone(phone != null ? phone : existingUser.getPhone());
        existingUser.setAddress(address != null ? address : existingUser.getAddress());
        existingUser.setMaritalStatus(maritalStatus != null ? maritalStatus : existingUser.getMaritalStatus());
        existingUser.setReligion(religion != null ? religion : existingUser.getReligion());
        existingUser.setCaste(caste != null ? caste : existingUser.getCaste());
        existingUser.setMotherTongue(motherTongue != null ? motherTongue : existingUser.getMotherTongue());
        existingUser.setEducation(education != null ? education : existingUser.getEducation());
        existingUser.setProfession(profession != null ? profession : existingUser.getProfession());
        existingUser.setAnnualIncome(annualIncome != 0 ? annualIncome : existingUser.getAnnualIncome());
        existingUser.setBio(bio != null ? bio : existingUser.getBio());
        existingUser.setHobbies(hobbies != null ? hobbies : existingUser.getHobbies());

        // Handle profile picture upload
        if (profilePicture != null && !profilePicture.isEmpty()) {
            try {
                String filename = StringUtils.cleanPath(profilePicture.getOriginalFilename());
                Path uploadPath = Paths.get(uploadDir + File.separator + filename);

                // Create directory if it doesn't exist
                if (!Files.exists(uploadPath.getParent())) {
                    Files.createDirectories(uploadPath.getParent());
                }

                // Save the image file locally
                profilePicture.transferTo(uploadPath.toFile());
                existingUser.setProfilePicture(filename);
            } catch (IOException e) {
                return ResponseEntity.status(500).body("Failed to upload profile picture.");
            }
        }

        userDao.save(existingUser); // Save updated user to the database

        return ResponseEntity.ok(existingUser);
    }
}
