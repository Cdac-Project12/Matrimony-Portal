package com.matrimony.Service;

import com.matrimony.Dao.UserDao;
import com.matrimony.Dao.UserProfileDao;
import com.matrimony.DTO.UserProfileResponse;
import com.matrimony.DTO.UserProfileUpdateRequest;
import com.matrimony.Entity.User;
import com.matrimony.Entity.UserProfile;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class UserProfileService {

    @Autowired
    private UserDao userDao;

    @Autowired
    private UserProfileDao userProfileDao;

    public User getUser(Long id) {
        return userDao.findById(id).orElseThrow(() -> new RuntimeException("User not found"));
    }

    public ResponseEntity<?> getUserProfile(Long userId) {
        User user = getUser(userId);
        Optional<UserProfile> profileOpt = userProfileDao.findByUserId(userId);

        // If no profile exists, return a default profile with empty fields
        UserProfile profile = profileOpt.orElse(new UserProfile());
        
        return ResponseEntity.ok(new UserProfileResponse(user, profile));
    }


    public ResponseEntity<String> updateUserProfile(Long userId, UserProfileUpdateRequest updateRequest) {
        User user = getUser(userId);
        Optional<UserProfile> profileOpt = userProfileDao.findByUserId(userId);

        UserProfile profile = profileOpt.orElse(new UserProfile());
        profile.setUser(user); // Ensure linkage

        // Update user details
        user.setFirstName(updateRequest.getFirstName());
        user.setLastName(updateRequest.getLastName());
        user.setEmail(updateRequest.getEmail());
        user.setPhone(updateRequest.getPhone());

        // Update profile details
//        profile.setBio(updateRequest.getBio());
//        profile.setHobbies(updateRequest.getHobbies());
        profile.setCaste(updateRequest.getCaste());
        profile.setMotherTongue(updateRequest.getMotherTongue());
        profile.setEducation(updateRequest.getEducation());
        profile.setProfession(updateRequest.getProfession());
        profile.setAnnualIncome(updateRequest.getAnnualIncome());
        profile.setAddress(updateRequest.getAddress());

        userDao.save(user);
        userProfileDao.save(profile);

        return ResponseEntity.ok("Profile updated successfully!");
    }
}
