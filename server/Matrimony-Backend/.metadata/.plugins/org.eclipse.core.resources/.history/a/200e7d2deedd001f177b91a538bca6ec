package com.matrimony.Service;

import com.matrimony.Dao.UserDao;
import com.matrimony.Dao.UserProfileDao;
import com.matrimony.DTO.UserProfileResponse;
import com.matrimony.DTO.UserProfileUpdateRequest;
import com.matrimony.Entity.User;
import com.matrimony.Entity.UserProfile;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Service
public class UserProfileService {

    @Autowired
    private UserDao userDao;

    @Autowired
    private UserProfileDao userProfileDao;

    public User getUser(Long id) {
        return userDao.findById(id).orElseThrow(() -> new RuntimeException("User not found"));
    }

    public ResponseEntity<?> getUserProfile(Long userId) {
        User user = getUser(userId);
        Optional<UserProfile> profileOpt = userProfileDao.findByUserId(userId);

        // Return user data along with profile data (even if profile is not available)
        UserProfile profile = profileOpt.orElse(new UserProfile());
        return ResponseEntity.ok(new UserProfileResponse(user, profile));
    }


    public ResponseEntity<?> updateUserProfile(Long userId, UserProfileUpdateRequest request) {
        User user = getUser(userId);
        Optional<UserProfile> profileOpt = userProfileDao.findByUserId(userId);

        // Update the user entity
        user.setFirstName(request.getFirstName());
        user.setLastName(request.getLastName());
        user.setEmail(request.getEmail());
        user.setPhone(request.getPhone());
        userDao.save(user);

        // Update or create the user profile entity
        UserProfile profile;
        if (profileOpt.isPresent()) {
            profile = profileOpt.get();
        } else {
            profile = new UserProfile();
            profile.setUser(user); // Ensure profile is linked to the user
        }

        profile.setCaste(request.getCaste());
        profile.setMotherTongue(request.getMotherTongue());
        profile.setEducation(request.getEducation());
        profile.setProfession(request.getProfession());
        profile.setAnnualIncome(request.getAnnualIncome());
        profile.setAddress(request.getAddress());

        userProfileDao.save(profile); // Ensure profile is saved properly

        return ResponseEntity.ok(new UserProfileResponse(user, profile));
    }

}
