package com.matrimony.Service;

import com.matrimony.Dao.UserDao;
import com.matrimony.Entity.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import java.util.Optional;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Service
public class UserService {

    @Autowired
    private UserDao userDao;

    private final PasswordEncoder passwordEncoder;

    public UserService() {
        // Instantiate BCryptPasswordEncoder
        this.passwordEncoder = new BCryptPasswordEncoder();
    }

    public User addUser(User user) {
        // Encrypt password before saving it
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        return userDao.save(user);
    }

    public ResponseEntity<?> login(User loginRequest) {
        Optional<User> userOpt = userDao.findByEmail(loginRequest.getEmail());

        if (userOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("User not found with the provided email.");
        }

        User user = userOpt.get();

        // Compare the hashed password with the provided password
        if (!passwordEncoder.matches(loginRequest.getPassword(), user.getPassword())) {
            return ResponseEntity.badRequest().body("Invalid credentials. Please check your password.");
        }

        return ResponseEntity.ok(user); // Return user if login is successful
    }

    public ResponseEntity<?> updateUser(Long userId, User updatedUser) {
        Optional<User> existingUserOpt = userDao.findById(userId);

        if (existingUserOpt.isEmpty()) {
            return ResponseEntity.status(404).body("User not found");
        }

        User existingUser = existingUserOpt.get();
        existingUser.setFirstName(updatedUser.getFirstName());
        existingUser.setLastName(updatedUser.getLastName());
        existingUser.setEmail(updatedUser.getEmail());
        existingUser.setPhone(updatedUser.getPhone());
        existingUser.setAddress(updatedUser.getAddress());
        existingUser.setProfilePicture(updatedUser.getProfilePicture());
        existingUser.setMaritalStatus(updatedUser.getMaritalStatus());
        existingUser.setReligion(updatedUser.getReligion());
        existingUser.setCaste(updatedUser.getCaste());
        existingUser.setMotherTongue(updatedUser.getMotherTongue());
        existingUser.setEducation(updatedUser.getEducation());
        existingUser.setProfession(updatedUser.getProfession());
        existingUser.setAnnualIncome(updatedUser.getAnnualIncome());
        existingUser.setBio(updatedUser.getBio());
        existingUser.setHobbies(updatedUser.getHobbies());

        // Do not encrypt password again during update unless the password is changed
        if (!updatedUser.getPassword().equals(existingUser.getPassword())) {
            existingUser.setPassword(passwordEncoder.encode(updatedUser.getPassword()));
        }

        userDao.save(existingUser);

        return ResponseEntity.ok("User updated successfully");
    }

    // Method to get user by ID
    public User getUserById(Long userId) {
        Optional<User> userOpt = userDao.findById(userId);
        return userOpt.orElse(null);  // Return null if user is not found
    }
}